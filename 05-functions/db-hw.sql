USE northwind;

-- 1. Создайте функцию, которая делает бэкап таблицы customers (копирует все данные в другую таблицу), 
--    предварительно стирая таблицу для бэкапа, если такая уже существует 
--    (чтобы в случае многократного запуска таблица для бэкапа перезатиралась).

DROP PROCEDURE IF EXISTS create_customers_backup;

DELIMITER $$

CREATE PROCEDURE create_customers_backup()

  BEGIN

    DROP TABLE IF EXISTS customers_bak;

    CREATE TABLE customers_bak AS
      SELECT * 
        FROM customers;

  END$$

DELIMITER ;

CALL create_customers_backup();

-- 2. Создать функцию, которая возвращает средний фрахт (freight) по всем заказам

DROP FUNCTION IF EXISTS avg_freight;

DELIMITER $$

CREATE FUNCTION avg_freight()
  RETURNS REAL DETERMINISTIC

BEGIN

RETURN (
    
  SELECT avg(freight) 
      FROM orders
  );

END$$

DELIMITER ;

SELECT avg_freight();

-- 3. Написать функцию, которая принимает 2 целочисленных параметра, 
--    используемых как нижняя и верхняя границы для генерации случайного числа в пределах этой границы 
--    (включая сами граничные значения).
--    - Функция rand() генерирует вещественное число от 0 до 1.
--    1. Необходимо вычислить разницу между границами и прибавить единицу.
--    2. На полученное число умножить результат функции random() 
--    3. и прибавить к результату значение нижней границы.
--    4. Применить функцию floor() к конечному результату, 
--       чтобы не "уехать" за границу и получить целое число.

DELIMITER $$

CREATE FUNCTION get_rand (
                 min REAL,
                 max REAL
               )
  RETURNS INT DETERMINISTIC

BEGIN

  DECLARE diff REAL;
  DECLARE rand REAL;

  SET diff = (max - min) + 1;
  SET rand = floor(diff * rand() + min);

  RETURN rand;

END$$

DELIMITER ;

SELECT get_rand(10 ,100);

-- 4. Создать функцию, которая возвращает самые низкую и высокую зарплаты среди сотрудников заданного города

USE northwind;

-- 5. Создать функцию, которая корректирует зарплату на заданный процент,  
--    но не корректирует зарплату, если её уровень превышает заданный уровень '
--    при этом верхний уровень зарплаты по умолчанию равен 70, а процент коррекции равен 15%.
 
-- 6. Модифицировать функцию, корректирующую зарплату таким образом, чтобы в результате коррекции, 
--    она так же выводила бы изменённые записи.

-- 7. Модифицировать предыдущую функцию так, чтобы она возвращала 
--    только колонки last_name, first_name, title, salary

-- 8. Написать функцию, которая принимает метод доставки 
--    и возвращает записи из таблицы orders в которых 
--    freight меньше значения, определяемого по следующему алгоритму:
--    - ищем максимум фрахта (freight) среди заказов по заданному методу доставки
--    - корректируем найденный максимум на 30% в сторону понижения
--    - вычисляем среднее значение фрахта среди заказов по заданному методому доставки
--    - вычисляем среднее значение между средним найденным на предыдущем шаге и скорректированным максимумом
--    - возвращаем все заказы в которых значение фрахта меньше найденного на предыдущем шаге среднего

-- 9. Написать функцию, которая принимает:
--    уровень зарплаты, максимальную зарплату (по умолчанию 80) 
--    минимальную зарплату (по умолчанию 30), коээфициет роста зарплаты (по умолчанию 20%)
--    Если зарплата выше минимальной, то возвращает false
--    Если зарплата ниже минимальной, то увеличивает зарплату на коэффициент роста и проверяет не станет ли зарплата после повышения превышать максимальную.
--    Если превысит - возвращает false, в противном случае true.
--    Проверить реализацию, передавая следующие параметры
--      (где c - уровень з/п, max - макс. уровень з/п, min - минимальный уровень з/п, r - коэффициент):
--      c = 40, max = 80, min = 30, r = 0.2 - должна вернуть false
--      c = 79, max = 81, min = 80, r = 0.2 - должна вернуть false
--      c = 79, max = 95, min = 80, r = 0.2 - должна вернуть true


